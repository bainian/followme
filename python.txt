request text 编码问题： http://sh3ll.me/2014/06/18/python-requests-encoding/
r.close()
r.encoding = r.apparent_encoding
print(r.text)

下载一个网站：
wget -c -r -np -k -L -p --restrict-file-names=utf-8 http://www.baidu.com

一些方法 ：
from operator iport itemgetter

L = [('Bob', 75), ('Adam', 92), ('Bart', 66), ('Lisa', 88), ("Fish", 99)]
print(sorted(L, key=itemgetter(0)))
print(sorted(L, key=lambda t: t[1]))
print(sorted(L, key=itemgetter(1), reverse=True))

重写的一些方法及作用：
python decorator:
def function(args):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kw):
            print('ok')
            return func(*args, **kw)
        return wrapper
    return decorator

__init__ 初始化
__var 私有变量 private
__slots__ 限制类变量范围
@property 把一个getter方法娈成属性，只需要加上@property就可以了，此时，@property本身又创建了另一个装饰器@score.setter，负责把一个setter方法变成属性赋值
>>> s = Student()
>>> s.score = 60 # OK，实际转化为s.set_score(60)
>>> s.score


__len__()方法会作用于len()函数
__str__ print(var)会打印出的
__repr__ 直接变量时的输出
__iter__ 实例本身就是可迭代对象，返回迭代的对象，然后当迭代时会调用其中的__next__方法
__getitem__ 可按下标取出值对应的还有 __setitem__
__getattr__ 当找不到该属性时会调用这个方法，
__call__ 一个对象实例可以有自己的方法，可以用callable()来判断一个对象是否是“可调用”对象。
>>> s = Student('Michael')
>>> s() # self参数不要传入
__new__ 元类，metaclass type()

file r w a b +


ａa = "如何是".encode(encoding='unicode-escape')
aa = b'\\u5982\\u4f55\\u662f'
cc = aa.decode('unicode-escape')
cc = '如何是'


from lxml import etree

ｓ = etree.HTML(html)
s.xpath('//a[starts-with(@href,"http")]//text()')

xart: generate art ascii texts 生成一个ａｓｃｉｉ的字符

py ghost.py 一个webkit可以运行网页，获取数据 也可以做一个网站

strAll = "{0}, {1}".format(i, j) 格式化



字体编码：
单个字符：ord()得到unicode字符集编码号，chr()根据unicode编码得到一个内存中的字符。
字符串：内存变量类型是str，一个字符对应几个字节，在保存与传输时转换为用b'str'的bytes类型，bytes的每个字符占一个字节。
以unicode表示的str通过encode()方法可以编码为指定的bytes,例‘ABC'.encode('ascii'),纯英文的str可用ascii编码为bytes,内容是一样的，含有中文的str可用utf-8编码为bytes.无法用ascii来编码，因为中文编码范围超 过了ascii的编码范围，
在bytes中无法显示为ascii的字符字节，用\x##显示。
在网络硬盘读到的数据是bytes,转为str，用decode()方法。
str包含了多少个字符，用len(str)方法。
如果是bytes类型，len(b'str')就计算的是字节数。例len(b'\xe4\xb8\xad\xe6\x96\x87') ->6

map, reduce, filter运用：（×把前面的函数应用在后面的列表的每一个元素上，默认会为前面函数传入每一个元素，只不过前面的函数逻辑功能不同×）
找出回字文：
def is_palindrome(n):
  b = [x for x in str(n)]
  b.reverse()
  print('b = %s' % b)
  b = reduce(lambda x, y : x * 10 + y, map(int,b))
  return b == n
  
print(list(filter(is_palindrome, range(0, 9999)))

 
